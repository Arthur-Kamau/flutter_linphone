def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

repositories {
    maven {
        name "linphone.org maven repository"
        url "https://linphone.org/maven_repository"
    }
}


android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "app.storiez.plugins.flutter_linphone_example"
        minSdkVersion 23
        targetSdkVersion 30
        ndkVersion "21.3.6528147"
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            ndk {
    abiFilters "armeabi-v7a", "x86"
}
            // minifyEnabled true
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
    
            // ndk {
            //     if (!project.hasProperty('target-platform')) {
            //         abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            //     } else {
            //         def platforms = project.property('target-platform').split(',')
            //         def platformMap = [
            //                 'android-arm'  : 'armeabi-v7a',
            //                 'android-arm64': 'arm64-v8a',
            //                 'android-x86'  : 'x86',
            //                 'android-x64'  : 'x86_64',
            //         ]
            //         abiFilters = platforms.stream().map({ e ->
            //             platformMap.containsKey(e) ? platformMap[e] : e
            //         }).toArray()
            //     }
            // }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
